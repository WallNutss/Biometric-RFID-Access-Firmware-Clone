name: PlatformIO CI Build and Release

on:
  push:
    branches: [main]

  release:
    types: [published]

jobs:
  build-esp-32:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          persist-credentials: false

      - name: Enable caching
        uses: actions/cache@v4.2.0
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio-esp32dev

      - name: Setup Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: "3.10"

      - name: Install PlatformIO and ESP-IDF Tool
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio esptool

      # TODO : Run Test Step

      - name: Run Manual Versioning
        id: runVersion
        run: |
          chmod +x ./scripts/determine_version.sh
          ./scripts/determine_version.sh
          # Ensure these variables are being set correctly
          echo $git describe --tags --abbrev=0
          echo "branchname=$branchname" >> $GITHUB_ENV
          echo "commithash=$commithash" >> $GITHUB_ENV
          echo "buildtimestamp=$buildtimestamp" >> $GITHUB_ENV
          echo "buildversion=$buildversion" >> $GITHUB_ENV
          echo "buildversionfilename=$buildversionfilename" >> $GITHUB_ENV
        shell: bash

      - name: Debug the exported environment variables
        run: |
          echo ${{ env.branchname }}
          echo ${{ env.commithash }}
          echo ${{ env.buildtimestamp }}
          echo ${{ env.buildversion }}
          echo ${{ env.buildversionfilename }}

  build-version-steps:
    runs-on: ubuntu-latest
    steps:
      - name: Debug the exported environment variables
        run: |
          echo ${{ env.branchname }}
          echo ${{ env.commithash }}
          echo ${{ env.buildtimestamp }}
          echo ${{ env.buildversion }}
          echo ${{ env.buildversionfilename }}

      - name: Save Build info
        uses: "DamianReeves/write-file-action@master"
        with:
          path: src/versionInfo.h
          write-mode: overwrite
          contents: |
            // ##########################################################################
            // ### This file is generated by Build and Continuous Integration scripts ###
            // ###            .github/workflows/build.yml for CI environment          ###
            // ### Changes will be overwritten on the next build                      ###
            // ##########################################################################
            #ifndef VERSION_INFO_H
            #define VERSION_INFO_H

            #define CURRENT_FIRMWARE_VERSION GIT_REV
            #define LAST_BUILD_FIRMWARE_VERSION ${{ env.buildversion }};
            #define LAST_FIRMWARE_VERSION_FILENAME ${{ env.buildversionfilename }};
            #define LAST_COMMIT_HASH ${{ env.commithash }};
            #define LAST_BUILD_TIMESTAMP ${{ env.buildtimestamp }};

            #endif

      - name: Bump versionInfo.h changes
        uses: EndBug/add-and-commit@v9
        with:
          message: "Bump versionInfo.h to [skip ci]"
          add: "src/versionInfo.h"
          cwd: "./Biometric-RFID-Access-Firmware-Clone"

      - name: Building
        run: chmod +x ./scripts/build.sh
        shell: bash

      - name: Create Git Tag
        run: |
          git config --global user.email "wallnuts73@gmail.com"
          git config --global user.name "WallNutss"
          git tag -a "${{ env.buildversion }}" -m "Release version v${{ env.buildversion }}"
          git push origin tag "${{ env.buildversion }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Zipped Artifact to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/biometric-esp32-group-c.zip
          asset_name: biometric-esp32-group-c-${{ env.buildversion }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge update main changes into develop
        run: |
          git fetch origin
          git checkout develop
          git merge origin/main
          git push origin develop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
